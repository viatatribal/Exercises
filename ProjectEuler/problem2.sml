(* Each new term in the Fibonacci sequence is generated by
 * adding the previous two terms. By starting with 1 and 2,
 * the first 10 terms will be:
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * By considering the terms in the Fibonacci sequence whose
 * values do not exceed four million, find the sum of
 * the even-valued terms.
 *)

open LargeInt;

(* An iterative Fibonacci function *)
local
  fun fib n m 0 = n
    | fib n m k = fib (m) (n+m) (k-1)
in
fun fibonacci n =
    fib 1 2 (n-1)
end;

(* Max value a Fibonacci number can reach *)
val max = toLarge 4000000;

(* Starting from 2, every third number in the Fibonacci
 * sequence is even (2, , ,8, , ,34) so we can get all
 * of them by making sure we go from from n = 2 up to some m
 * not included, such that n=2, n+3, n+3+3, ..., m
 * where m is defined as a number such that the Fibonnaci number
 * m last number such that m < max
 *)
fun fibeven n =
    let
      val m = fibonacci n
    in
      if m > max then []
      else m :: fibeven (n+3)
    end;

(* Finally our solution *)
val solution = List.reduce
                   (fn (x,y) => x + y)
                        0
                        (fibeven 2);
