(* The sequence of triangle numbers is generated by adding the natural
 *  numbers. So the 7th triangle number would be
 * 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
 *       1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * Let us list the factors of the first seven triangle numbers:
 *                      1: 1,
 *                      3: 1, 3
 *                      6: 1, 2, 3, 6
 *                     10: 1, 2, 5, 10
 *                     15: 1, 3, 5, 15
 *                     21: 1, 3, 7, 21
 *                     28: 1, 2, 4, 7, 14, 28
 *  We can see that 28 is the first triangle number
 * to have over five divisors.
 * What is the value of the first triangle number to have over
 * five hundred divisors?
 *)
local
  open LargeInt;

  fun intSqrt n =
      fromInt
          (Real.floor
               (Real.Math.sqrt(Real.fromLargeInt n)));

  fun loop i d limit count =
      if d > limit
      then count+2
      else if i mod d = 0
      then loop i (d+1) limit (count+2)
      else loop i (d+1) limit count;

  fun divisors n =
      let
        val tri = n * (n + 1) div 2
        val limit = intSqrt tri
        val count = loop tri 2 limit 0
        val extra = if limit*limit = tri then ~1 else 0
      in
        if (count+extra) > 500
        then tri
        else
          divisors (n+1)
      end
in
val solution = divisors 2
end;
